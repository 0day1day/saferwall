// Code generated by protoc-gen-go. DO NOT EDIT.
// source: multiav.avira.proto

package avira_api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The scan file request message containing the file path to scan.
type ScanFileRequest struct {
	Filepath             string   `protobuf:"bytes,1,opt,name=filepath,proto3" json:"filepath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScanFileRequest) Reset()         { *m = ScanFileRequest{} }
func (m *ScanFileRequest) String() string { return proto.CompactTextString(m) }
func (*ScanFileRequest) ProtoMessage()    {}
func (*ScanFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_604db18eda163269, []int{0}
}

func (m *ScanFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanFileRequest.Unmarshal(m, b)
}
func (m *ScanFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanFileRequest.Marshal(b, m, deterministic)
}
func (m *ScanFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanFileRequest.Merge(m, src)
}
func (m *ScanFileRequest) XXX_Size() int {
	return xxx_messageInfo_ScanFileRequest.Size(m)
}
func (m *ScanFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScanFileRequest proto.InternalMessageInfo

func (m *ScanFileRequest) GetFilepath() string {
	if m != nil {
		return m.Filepath
	}
	return ""
}

// The scan response message containing detection results of the antiVirus.
type ScanResponse struct {
	Output               string   `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Infected             bool     `protobuf:"varint,2,opt,name=infected,proto3" json:"infected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScanResponse) Reset()         { *m = ScanResponse{} }
func (m *ScanResponse) String() string { return proto.CompactTextString(m) }
func (*ScanResponse) ProtoMessage()    {}
func (*ScanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_604db18eda163269, []int{1}
}

func (m *ScanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanResponse.Unmarshal(m, b)
}
func (m *ScanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanResponse.Marshal(b, m, deterministic)
}
func (m *ScanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanResponse.Merge(m, src)
}
func (m *ScanResponse) XXX_Size() int {
	return xxx_messageInfo_ScanResponse.Size(m)
}
func (m *ScanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScanResponse proto.InternalMessageInfo

func (m *ScanResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *ScanResponse) GetInfected() bool {
	if m != nil {
		return m.Infected
	}
	return false
}

// The license request message contains the license in binary format.
type LicenseRequest struct {
	License              []byte   `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LicenseRequest) Reset()         { *m = LicenseRequest{} }
func (m *LicenseRequest) String() string { return proto.CompactTextString(m) }
func (*LicenseRequest) ProtoMessage()    {}
func (*LicenseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_604db18eda163269, []int{2}
}

func (m *LicenseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LicenseRequest.Unmarshal(m, b)
}
func (m *LicenseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LicenseRequest.Marshal(b, m, deterministic)
}
func (m *LicenseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseRequest.Merge(m, src)
}
func (m *LicenseRequest) XXX_Size() int {
	return xxx_messageInfo_LicenseRequest.Size(m)
}
func (m *LicenseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseRequest proto.InternalMessageInfo

func (m *LicenseRequest) GetLicense() []byte {
	if m != nil {
		return m.License
	}
	return nil
}

// The license response message.
type LicenseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LicenseResponse) Reset()         { *m = LicenseResponse{} }
func (m *LicenseResponse) String() string { return proto.CompactTextString(m) }
func (*LicenseResponse) ProtoMessage()    {}
func (*LicenseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_604db18eda163269, []int{3}
}

func (m *LicenseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LicenseResponse.Unmarshal(m, b)
}
func (m *LicenseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LicenseResponse.Marshal(b, m, deterministic)
}
func (m *LicenseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseResponse.Merge(m, src)
}
func (m *LicenseResponse) XXX_Size() int {
	return xxx_messageInfo_LicenseResponse.Size(m)
}
func (m *LicenseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ScanFileRequest)(nil), "avira.api.ScanFileRequest")
	proto.RegisterType((*ScanResponse)(nil), "avira.api.ScanResponse")
	proto.RegisterType((*LicenseRequest)(nil), "avira.api.LicenseRequest")
	proto.RegisterType((*LicenseResponse)(nil), "avira.api.LicenseResponse")
}

func init() { proto.RegisterFile("multiav.avira.proto", fileDescriptor_604db18eda163269) }

var fileDescriptor_604db18eda163269 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0xc6, 0xad, 0x87, 0xb5, 0x3b, 0x14, 0x8b, 0x11, 0xb4, 0xe6, 0xb4, 0xe4, 0xb4, 0x08, 0xf6,
	0xa0, 0x4f, 0x50, 0x0f, 0x1e, 0xc4, 0x53, 0x7c, 0x82, 0x58, 0x67, 0x71, 0xa0, 0xa6, 0xb1, 0x9d,
	0xf4, 0x6d, 0x7c, 0x57, 0xc9, 0xb6, 0x09, 0x5a, 0x3c, 0xfe, 0x32, 0x1f, 0xdf, 0x9f, 0xc0, 0xe5,
	0xa7, 0xef, 0x98, 0xcc, 0x54, 0x9b, 0x89, 0x06, 0x53, 0xbb, 0xa1, 0xe7, 0x5e, 0x6c, 0x67, 0x30,
	0x8e, 0xd4, 0x1d, 0x94, 0xaf, 0xad, 0xb1, 0x4f, 0xd4, 0xa1, 0xc6, 0x2f, 0x8f, 0x23, 0x0b, 0x09,
	0xf9, 0x81, 0x3a, 0x74, 0x86, 0x3f, 0xaa, 0x6c, 0x97, 0xed, 0xb7, 0x3a, 0xb1, 0x7a, 0x84, 0x22,
	0xc8, 0x35, 0x8e, 0xae, 0xb7, 0x23, 0x8a, 0x2b, 0xd8, 0xf4, 0x9e, 0x9d, 0xe7, 0x45, 0xb9, 0x50,
	0xf0, 0x20, 0x7b, 0xc0, 0x96, 0xf1, 0xbd, 0x3a, 0xdd, 0x65, 0xfb, 0x5c, 0x27, 0x56, 0xb7, 0x70,
	0xfe, 0x42, 0x2d, 0xda, 0x31, 0x25, 0x56, 0x70, 0xd6, 0xcd, 0x2f, 0x47, 0x9b, 0x42, 0x47, 0x54,
	0x17, 0x50, 0x26, 0xed, 0x1c, 0x79, 0xff, 0x9d, 0x41, 0xd1, 0x84, 0xfe, 0xa1, 0x88, 0xc5, 0x41,
	0x34, 0x90, 0xc7, 0x09, 0x42, 0xd6, 0x69, 0x5a, 0xbd, 0xda, 0x25, 0xaf, 0x57, 0xb7, 0xe8, 0xa8,
	0x4e, 0xc4, 0x33, 0x94, 0x4d, 0xcb, 0x34, 0x19, 0xc6, 0x25, 0x4e, 0xdc, 0xfc, 0x52, 0xff, 0xad,
	0x2b, 0xe5, 0x7f, 0xa7, 0xe8, 0xf5, 0xb6, 0x39, 0xfe, 0xf1, 0xc3, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb6, 0x1d, 0xc0, 0xf8, 0x7a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AviraScannerClient is the client API for AviraScanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AviraScannerClient interface {
	// Scan a file
	ScanFile(ctx context.Context, in *ScanFileRequest, opts ...grpc.CallOption) (*ScanResponse, error)
	// Activate product license
	ActivateLicense(ctx context.Context, in *LicenseRequest, opts ...grpc.CallOption) (*LicenseResponse, error)
}

type aviraScannerClient struct {
	cc *grpc.ClientConn
}

func NewAviraScannerClient(cc *grpc.ClientConn) AviraScannerClient {
	return &aviraScannerClient{cc}
}

func (c *aviraScannerClient) ScanFile(ctx context.Context, in *ScanFileRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, "/avira.api.AviraScanner/ScanFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviraScannerClient) ActivateLicense(ctx context.Context, in *LicenseRequest, opts ...grpc.CallOption) (*LicenseResponse, error) {
	out := new(LicenseResponse)
	err := c.cc.Invoke(ctx, "/avira.api.AviraScanner/ActivateLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AviraScannerServer is the server API for AviraScanner service.
type AviraScannerServer interface {
	// Scan a file
	ScanFile(context.Context, *ScanFileRequest) (*ScanResponse, error)
	// Activate product license
	ActivateLicense(context.Context, *LicenseRequest) (*LicenseResponse, error)
}

// UnimplementedAviraScannerServer can be embedded to have forward compatible implementations.
type UnimplementedAviraScannerServer struct {
}

func (*UnimplementedAviraScannerServer) ScanFile(ctx context.Context, req *ScanFileRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanFile not implemented")
}
func (*UnimplementedAviraScannerServer) ActivateLicense(ctx context.Context, req *LicenseRequest) (*LicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateLicense not implemented")
}

func RegisterAviraScannerServer(s *grpc.Server, srv AviraScannerServer) {
	s.RegisterService(&_AviraScanner_serviceDesc, srv)
}

func _AviraScanner_ScanFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviraScannerServer).ScanFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avira.api.AviraScanner/ScanFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviraScannerServer).ScanFile(ctx, req.(*ScanFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AviraScanner_ActivateLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviraScannerServer).ActivateLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avira.api.AviraScanner/ActivateLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviraScannerServer).ActivateLicense(ctx, req.(*LicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AviraScanner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "avira.api.AviraScanner",
	HandlerType: (*AviraScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanFile",
			Handler:    _AviraScanner_ScanFile_Handler,
		},
		{
			MethodName: "ActivateLicense",
			Handler:    _AviraScanner_ActivateLicense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multiav.avira.proto",
}
