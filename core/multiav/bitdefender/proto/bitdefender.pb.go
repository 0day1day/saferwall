// Code generated by protoc-gen-go. DO NOT EDIT.
// source: multiav.bitdefender.proto

package bitdefender_api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The scan file request message containing the file path to scan.
type ScanFileRequest struct {
	Filepath             string   `protobuf:"bytes,1,opt,name=filepath,proto3" json:"filepath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScanFileRequest) Reset()         { *m = ScanFileRequest{} }
func (m *ScanFileRequest) String() string { return proto.CompactTextString(m) }
func (*ScanFileRequest) ProtoMessage()    {}
func (*ScanFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae50a45a58bbd699, []int{0}
}

func (m *ScanFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanFileRequest.Unmarshal(m, b)
}
func (m *ScanFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanFileRequest.Marshal(b, m, deterministic)
}
func (m *ScanFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanFileRequest.Merge(m, src)
}
func (m *ScanFileRequest) XXX_Size() int {
	return xxx_messageInfo_ScanFileRequest.Size(m)
}
func (m *ScanFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScanFileRequest proto.InternalMessageInfo

func (m *ScanFileRequest) GetFilepath() string {
	if m != nil {
		return m.Filepath
	}
	return ""
}

// The scan response message containing detection results of the AntiVirus.
type ScanResponse struct {
	Output               string   `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Infected             bool     `protobuf:"varint,2,opt,name=infected,proto3" json:"infected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScanResponse) Reset()         { *m = ScanResponse{} }
func (m *ScanResponse) String() string { return proto.CompactTextString(m) }
func (*ScanResponse) ProtoMessage()    {}
func (*ScanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae50a45a58bbd699, []int{1}
}

func (m *ScanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanResponse.Unmarshal(m, b)
}
func (m *ScanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanResponse.Marshal(b, m, deterministic)
}
func (m *ScanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanResponse.Merge(m, src)
}
func (m *ScanResponse) XXX_Size() int {
	return xxx_messageInfo_ScanResponse.Size(m)
}
func (m *ScanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScanResponse proto.InternalMessageInfo

func (m *ScanResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *ScanResponse) GetInfected() bool {
	if m != nil {
		return m.Infected
	}
	return false
}

// The version request message ask for version.
type VersionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionRequest) Reset()         { *m = VersionRequest{} }
func (m *VersionRequest) String() string { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()    {}
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae50a45a58bbd699, []int{2}
}

func (m *VersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionRequest.Unmarshal(m, b)
}
func (m *VersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionRequest.Marshal(b, m, deterministic)
}
func (m *VersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionRequest.Merge(m, src)
}
func (m *VersionRequest) XXX_Size() int {
	return xxx_messageInfo_VersionRequest.Size(m)
}
func (m *VersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VersionRequest proto.InternalMessageInfo

// The response message containing program/VPS version.
type VersionResponse struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionResponse) Reset()         { *m = VersionResponse{} }
func (m *VersionResponse) String() string { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()    {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae50a45a58bbd699, []int{3}
}

func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionResponse.Unmarshal(m, b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
}
func (m *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(m, src)
}
func (m *VersionResponse) XXX_Size() int {
	return xxx_messageInfo_VersionResponse.Size(m)
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*ScanFileRequest)(nil), "bitdefender.api.ScanFileRequest")
	proto.RegisterType((*ScanResponse)(nil), "bitdefender.api.ScanResponse")
	proto.RegisterType((*VersionRequest)(nil), "bitdefender.api.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "bitdefender.api.VersionResponse")
}

func init() { proto.RegisterFile("multiav.bitdefender.proto", fileDescriptor_ae50a45a58bbd699) }

var fileDescriptor_ae50a45a58bbd699 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0xad, 0x87, 0xb5, 0x0e, 0x62, 0x75, 0x0e, 0x52, 0x0b, 0x62, 0xc9, 0x69, 0x41, 0xec,
	0x41, 0xff, 0xc1, 0x1e, 0xf4, 0x24, 0x48, 0x05, 0xf1, 0x9a, 0xdd, 0x4e, 0x35, 0xd0, 0x4d, 0x62,
	0x32, 0xd9, 0x7f, 0xe7, 0x7f, 0x93, 0x6a, 0x52, 0x75, 0xd5, 0xe3, 0x7b, 0xbc, 0xbc, 0x79, 0x1f,
	0x81, 0xd3, 0x75, 0x18, 0x58, 0xc9, 0x4d, 0xb3, 0x54, 0xdc, 0x51, 0x4f, 0xba, 0x23, 0xd7, 0x58,
	0x67, 0xd8, 0x60, 0xf1, 0xdd, 0x92, 0x56, 0x89, 0x4b, 0x28, 0x1e, 0x56, 0x52, 0xdf, 0xa8, 0x81,
	0x5a, 0x7a, 0x0d, 0xe4, 0x19, 0x2b, 0xc8, 0x7b, 0x35, 0x90, 0x95, 0xfc, 0x52, 0x66, 0x75, 0x36,
	0xdf, 0x6f, 0x27, 0x2d, 0x16, 0x70, 0x30, 0xc6, 0x5b, 0xf2, 0xd6, 0x68, 0x4f, 0x78, 0x02, 0x33,
	0x13, 0xd8, 0x06, 0x8e, 0xc9, 0xa8, 0xc6, 0x0e, 0xa5, 0x7b, 0x5a, 0x31, 0x75, 0xe5, 0x6e, 0x9d,
	0xcd, 0xf3, 0x76, 0xd2, 0xe2, 0x08, 0x0e, 0x1f, 0xc9, 0x79, 0x65, 0x74, 0xbc, 0x28, 0x2e, 0xa0,
	0x98, 0x9c, 0x58, 0x5c, 0xc2, 0xde, 0xe6, 0xd3, 0x8a, 0xcd, 0x49, 0x5e, 0xbd, 0x65, 0x80, 0x8b,
	0x2f, 0x8a, 0x71, 0x8e, 0x26, 0x87, 0x77, 0x90, 0x27, 0x10, 0xac, 0x9b, 0x2d, 0xcc, 0x66, 0x8b,
	0xb1, 0x3a, 0xfb, 0x33, 0x91, 0xae, 0x8b, 0x1d, 0x7c, 0x82, 0xe3, 0x5b, 0xe2, 0x7b, 0x67, 0x9e,
	0x9d, 0x5c, 0xc7, 0x71, 0x78, 0xfe, 0xeb, 0xd5, 0x4f, 0x90, 0xaa, 0xfe, 0x3f, 0x90, 0x9a, 0x97,
	0xb3, 0x8f, 0x9f, 0xb8, 0x7e, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x42, 0x7b, 0xca, 0x98, 0xa6, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BitdefenderScannerClient is the client API for BitdefenderScanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BitdefenderScannerClient interface {
	// Scan a file
	ScanFile(ctx context.Context, in *ScanFileRequest, opts ...grpc.CallOption) (*ScanResponse, error)
	// Get program version
	GetProgramVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type bitdefenderScannerClient struct {
	cc *grpc.ClientConn
}

func NewBitdefenderScannerClient(cc *grpc.ClientConn) BitdefenderScannerClient {
	return &bitdefenderScannerClient{cc}
}

func (c *bitdefenderScannerClient) ScanFile(ctx context.Context, in *ScanFileRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, "/bitdefender.api.BitdefenderScanner/ScanFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitdefenderScannerClient) GetProgramVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/bitdefender.api.BitdefenderScanner/GetProgramVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BitdefenderScannerServer is the server API for BitdefenderScanner service.
type BitdefenderScannerServer interface {
	// Scan a file
	ScanFile(context.Context, *ScanFileRequest) (*ScanResponse, error)
	// Get program version
	GetProgramVersion(context.Context, *VersionRequest) (*VersionResponse, error)
}

// UnimplementedBitdefenderScannerServer can be embedded to have forward compatible implementations.
type UnimplementedBitdefenderScannerServer struct {
}

func (*UnimplementedBitdefenderScannerServer) ScanFile(ctx context.Context, req *ScanFileRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanFile not implemented")
}
func (*UnimplementedBitdefenderScannerServer) GetProgramVersion(ctx context.Context, req *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgramVersion not implemented")
}

func RegisterBitdefenderScannerServer(s *grpc.Server, srv BitdefenderScannerServer) {
	s.RegisterService(&_BitdefenderScanner_serviceDesc, srv)
}

func _BitdefenderScanner_ScanFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitdefenderScannerServer).ScanFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitdefender.api.BitdefenderScanner/ScanFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitdefenderScannerServer).ScanFile(ctx, req.(*ScanFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitdefenderScanner_GetProgramVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitdefenderScannerServer).GetProgramVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitdefender.api.BitdefenderScanner/GetProgramVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitdefenderScannerServer).GetProgramVersion(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BitdefenderScanner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitdefender.api.BitdefenderScanner",
	HandlerType: (*BitdefenderScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanFile",
			Handler:    _BitdefenderScanner_ScanFile_Handler,
		},
		{
			MethodName: "GetProgramVersion",
			Handler:    _BitdefenderScanner_GetProgramVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multiav.bitdefender.proto",
}
